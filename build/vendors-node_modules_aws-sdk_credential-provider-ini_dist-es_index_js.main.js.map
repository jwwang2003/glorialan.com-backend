{"version":3,"file":"vendors-node_modules_aws-sdk_credential-provider-ini_dist-es_index_js.main.js","mappings":"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","sources":["webpack://glorialan.com-backend/./node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js","webpack://glorialan.com-backend/./node_modules/@aws-sdk/credential-provider-ini/dist-es/index.js","webpack://glorialan.com-backend/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js","webpack://glorialan.com-backend/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js","webpack://glorialan.com-backend/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js","webpack://glorialan.com-backend/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js","webpack://glorialan.com-backend/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js","webpack://glorialan.com-backend/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js","webpack://glorialan.com-backend/./node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js"],"sourcesContent":["import { getProfileName, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const fromIni = (_init = {}) => async ({ callerClientConfig } = {}) => {\n    const init = {\n        ..._init,\n        parentClientConfig: {\n            ...callerClientConfig,\n            ..._init.parentClientConfig,\n        },\n    };\n    init.logger?.debug(\"@aws-sdk/credential-provider-ini - fromIni\");\n    const profiles = await parseKnownFiles(init);\n    return resolveProfileData(getProfileName({\n        profile: _init.profile ?? callerClientConfig?.profile,\n    }), profiles, init);\n};\n","export * from \"./fromIni\";\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getProfileName } from \"@smithy/shared-ini-file-loader\";\nimport { resolveCredentialSource } from \"./resolveCredentialSource\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const isAssumeRoleProfile = (arg, { profile = \"default\", logger } = {}) => {\n    return (Boolean(arg) &&\n        typeof arg === \"object\" &&\n        typeof arg.role_arn === \"string\" &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1 &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.external_id) > -1 &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.mfa_serial) > -1 &&\n        (isAssumeRoleWithSourceProfile(arg, { profile, logger }) || isCredentialSourceProfile(arg, { profile, logger })));\n};\nconst isAssumeRoleWithSourceProfile = (arg, { profile, logger }) => {\n    const withSourceProfile = typeof arg.source_profile === \"string\" && typeof arg.credential_source === \"undefined\";\n    if (withSourceProfile) {\n        logger?.debug?.(`    ${profile} isAssumeRoleWithSourceProfile source_profile=${arg.source_profile}`);\n    }\n    return withSourceProfile;\n};\nconst isCredentialSourceProfile = (arg, { profile, logger }) => {\n    const withProviderProfile = typeof arg.credential_source === \"string\" && typeof arg.source_profile === \"undefined\";\n    if (withProviderProfile) {\n        logger?.debug?.(`    ${profile} isCredentialSourceProfile credential_source=${arg.credential_source}`);\n    }\n    return withProviderProfile;\n};\nexport const resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {\n    options.logger?.debug(\"@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)\");\n    const profileData = profiles[profileName];\n    const { source_profile, region } = profileData;\n    if (!options.roleAssumer) {\n        const { getDefaultRoleAssumer } = await import(\"@aws-sdk/client-sts\");\n        options.roleAssumer = getDefaultRoleAssumer({\n            ...options.clientConfig,\n            credentialProviderLogger: options.logger,\n            parentClientConfig: {\n                ...options?.parentClientConfig,\n                region: region ?? options?.parentClientConfig?.region,\n            },\n        }, options.clientPlugins);\n    }\n    if (source_profile && source_profile in visitedProfiles) {\n        throw new CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile` +\n            ` ${getProfileName(options)}. Profiles visited: ` +\n            Object.keys(visitedProfiles).join(\", \"), { logger: options.logger });\n    }\n    options.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${source_profile ? `source_profile=[${source_profile}]` : `profile=[${profileName}]`}`);\n    const sourceCredsProvider = source_profile\n        ? resolveProfileData(source_profile, profiles, options, {\n            ...visitedProfiles,\n            [source_profile]: true,\n        }, isCredentialSourceWithoutRoleArn(profiles[source_profile] ?? {}))\n        : (await resolveCredentialSource(profileData.credential_source, profileName, options.logger)(options))();\n    if (isCredentialSourceWithoutRoleArn(profileData)) {\n        return sourceCredsProvider.then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SOURCE_PROFILE\", \"o\"));\n    }\n    else {\n        const params = {\n            RoleArn: profileData.role_arn,\n            RoleSessionName: profileData.role_session_name || `aws-sdk-js-${Date.now()}`,\n            ExternalId: profileData.external_id,\n            DurationSeconds: parseInt(profileData.duration_seconds || \"3600\", 10),\n        };\n        const { mfa_serial } = profileData;\n        if (mfa_serial) {\n            if (!options.mfaCodeProvider) {\n                throw new CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, { logger: options.logger, tryNextLink: false });\n            }\n            params.SerialNumber = mfa_serial;\n            params.TokenCode = await options.mfaCodeProvider(mfa_serial);\n        }\n        const sourceCreds = await sourceCredsProvider;\n        return options.roleAssumer(sourceCreds, params).then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SOURCE_PROFILE\", \"o\"));\n    }\n};\nconst isCredentialSourceWithoutRoleArn = (section) => {\n    return !section.role_arn && !!section.credential_source;\n};\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { chain, CredentialsProviderError } from \"@smithy/property-provider\";\nexport const resolveCredentialSource = (credentialSource, profileName, logger) => {\n    const sourceProvidersMap = {\n        EcsContainer: async (options) => {\n            const { fromHttp } = await import(\"@aws-sdk/credential-provider-http\");\n            const { fromContainerMetadata } = await import(\"@smithy/credential-provider-imds\");\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is EcsContainer\");\n            return async () => chain(fromHttp(options ?? {}), fromContainerMetadata(options))().then(setNamedProvider);\n        },\n        Ec2InstanceMetadata: async (options) => {\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata\");\n            const { fromInstanceMetadata } = await import(\"@smithy/credential-provider-imds\");\n            return async () => fromInstanceMetadata(options)().then(setNamedProvider);\n        },\n        Environment: async (options) => {\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is Environment\");\n            const { fromEnv } = await import(\"@aws-sdk/credential-provider-env\");\n            return async () => fromEnv(options)().then(setNamedProvider);\n        },\n    };\n    if (credentialSource in sourceProvidersMap) {\n        return sourceProvidersMap[credentialSource];\n    }\n    else {\n        throw new CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, ` +\n            `expected EcsContainer or Ec2InstanceMetadata or Environment.`, { logger });\n    }\n};\nconst setNamedProvider = (creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_NAMED_PROVIDER\", \"p\");\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const isProcessProfile = (arg) => Boolean(arg) && typeof arg === \"object\" && typeof arg.credential_process === \"string\";\nexport const resolveProcessCredentials = async (options, profile) => import(\"@aws-sdk/credential-provider-process\").then(({ fromProcess }) => fromProcess({\n    ...options,\n    profile,\n})().then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_PROCESS\", \"v\")));\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { isAssumeRoleProfile, resolveAssumeRoleCredentials } from \"./resolveAssumeRoleCredentials\";\nimport { isProcessProfile, resolveProcessCredentials } from \"./resolveProcessCredentials\";\nimport { isSsoProfile, resolveSsoCredentials } from \"./resolveSsoCredentials\";\nimport { isStaticCredsProfile, resolveStaticCredentials } from \"./resolveStaticCredentials\";\nimport { isWebIdentityProfile, resolveWebIdentityCredentials } from \"./resolveWebIdentityCredentials\";\nexport const resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}, isAssumeRoleRecursiveCall = false) => {\n    const data = profiles[profileName];\n    if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isAssumeRoleRecursiveCall || isAssumeRoleProfile(data, { profile: profileName, logger: options.logger })) {\n        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);\n    }\n    if (isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isWebIdentityProfile(data)) {\n        return resolveWebIdentityCredentials(data, options);\n    }\n    if (isProcessProfile(data)) {\n        return resolveProcessCredentials(options, profileName);\n    }\n    if (isSsoProfile(data)) {\n        return await resolveSsoCredentials(profileName, data, options);\n    }\n    throw new CredentialsProviderError(`Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`, { logger: options.logger });\n};\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const resolveSsoCredentials = async (profile, profileData, options = {}) => {\n    const { fromSSO } = await import(\"@aws-sdk/credential-provider-sso\");\n    return fromSSO({\n        profile,\n        logger: options.logger,\n        parentClientConfig: options.parentClientConfig,\n        clientConfig: options.clientConfig,\n    })().then((creds) => {\n        if (profileData.sso_session) {\n            return setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SSO\", \"r\");\n        }\n        else {\n            return setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SSO_LEGACY\", \"t\");\n        }\n    });\n};\nexport const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const isStaticCredsProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.aws_access_key_id === \"string\" &&\n    typeof arg.aws_secret_access_key === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_session_token) > -1 &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_account_id) > -1;\nexport const resolveStaticCredentials = async (profile, options) => {\n    options?.logger?.debug(\"@aws-sdk/credential-provider-ini - resolveStaticCredentials\");\n    const credentials = {\n        accessKeyId: profile.aws_access_key_id,\n        secretAccessKey: profile.aws_secret_access_key,\n        sessionToken: profile.aws_session_token,\n        ...(profile.aws_credential_scope && { credentialScope: profile.aws_credential_scope }),\n        ...(profile.aws_account_id && { accountId: profile.aws_account_id }),\n    };\n    return setCredentialFeature(credentials, \"CREDENTIALS_PROFILE\", \"n\");\n};\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const isWebIdentityProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.web_identity_token_file === \"string\" &&\n    typeof arg.role_arn === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1;\nexport const resolveWebIdentityCredentials = async (profile, options) => import(\"@aws-sdk/credential-provider-web-identity\").then(({ fromTokenFile }) => fromTokenFile({\n    webIdentityTokenFile: profile.web_identity_token_file,\n    roleArn: profile.role_arn,\n    roleSessionName: profile.role_session_name,\n    roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,\n    logger: options.logger,\n    parentClientConfig: options.parentClientConfig,\n})().then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN\", \"q\")));\n"],"names":[],"sourceRoot":""}